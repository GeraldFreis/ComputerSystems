// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in=address[12], out=NAddress12); Not(in=address[13], out=NAddress13);
    Xor(a=load, b=load, out=T);          
    
    And(a=NAddress13, b=address[12], out=ifThreePre); 
    Mux(b=ifThreePre, a=T, sel=load, out=ifThree);
    
    And(a=NAddress12, b=address[13], out=ifTwoPre); 
    Mux(b=ifTwoPre, a=T, sel=load, out=ifTwo);
    
    And(a=NAddress13, b=NAddress12, out=ifOnePre); 
    Mux(b=ifOnePre, a=T, sel=load, out=ifOne);
    
    And(a=address[13], b=address[12], out=ifZeroPre); 
    Mux(b=ifZeroPre, a=T, sel=load, out=ifZero);
    
    RAM4K(in=in, address=address[0..11], load=ifZero , out=out1);
    RAM4K(in=in, address=address[0..11], load=ifOne , out=out2);
    RAM4K(in=in, address=address[0..11], load=ifTwo , out=out3);
    RAM4K(in=in, address=address[0..11], load=ifThree , out=out4);

    
    Mux4Way16(a=out2, b=out4, c=out3, d=out1, sel=address[12..13], out=out);
}
