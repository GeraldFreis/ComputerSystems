// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // creating a set of '0' values
   Xor(a=x[0], b=x[0], out=zero); Not(in=zero, out=one);
   // taking the mux of zx: if it is zero we output x, if it is 1 we output the zero value
   Mux(a=x[0], b=zero, sel=zx, out=firstcomp0); Mux(a=x[1], b=zero, sel=zx, out=firstcomp1); Mux(a=x[2], b=zero, sel=zx, out=firstcomp2);
   Mux(a=x[3], b=zero, sel=zx, out=firstcomp3); Mux(a=x[4], b=zero, sel=zx, out=firstcomp4); Mux(a=x[5], b=zero, sel=zx, out=firstcomp5);
   Mux(a=x[6], b=zero, sel=zx, out=firstcomp6); Mux(a=x[7], b=zero, sel=zx, out=firstcomp7); Mux(a=x[8], b=zero, sel=zx, out=firstcomp8);
   Mux(a=x[9], b=zero, sel=zx, out=firstcomp9); Mux(a=x[10], b=zero, sel=zx, out=firstcomp10); Mux(a=x[11], b=zero, sel=zx, out=firstcomp11);
   Mux(a=x[12], b=zero, sel=zx, out=firstcomp12); Mux(a=x[13], b=zero, sel=zx, out=firstcomp13); Mux(a=x[14], b=zero, sel=zx, out=firstcomp14);
   Mux(a=x[15], b=zero, sel=zx, out=firstcomp15);
   
   // finding the not values of the first comp for the second comp
   Not(in=firstcomp0, out=Notfirstcomp0); Not(in=firstcomp1, out=Notfirstcomp1); Not(in=firstcomp2, out=Notfirstcomp2);
   Not(in=firstcomp3, out=Notfirstcomp3); Not(in=firstcomp4, out=Notfirstcomp4); Not(in=firstcomp5, out=Notfirstcomp5);
   Not(in=firstcomp6, out=Notfirstcomp6); Not(in=firstcomp7, out=Notfirstcomp7); Not(in=firstcomp8, out=Notfirstcomp8);
   Not(in=firstcomp9, out=Notfirstcomp9); Not(in=firstcomp10, out=Notfirstcomp10); Not(in=firstcomp11, out=Notfirstcomp11);
   Not(in=firstcomp12, out=Notfirstcomp12); Not(in=firstcomp13, out=Notfirstcomp13); Not(in=firstcomp14, out=Notfirstcomp14);
   Not(in=firstcomp15, out=Notfirstcomp15);
   // taking the mux of nx: if it is zero we output the firstcompn, if it is 1 we output the not of the firstcompn
   Mux(a=firstcomp0, b=Notfirstcomp0, sel=nx, out=secondcomp0); Mux(a=firstcomp1, b=Notfirstcomp1, sel=nx, out=secondcomp1);
   Mux(a=firstcomp2, b=Notfirstcomp2, sel=nx, out=secondcomp2); Mux(a=firstcomp3, b=Notfirstcomp3, sel=nx, out=secondcomp3);
   Mux(a=firstcomp4, b=Notfirstcomp4, sel=nx, out=secondcomp4); Mux(a=firstcomp5, b=Notfirstcomp5, sel=nx, out=secondcomp5);
   Mux(a=firstcomp6, b=Notfirstcomp6, sel=nx, out=secondcomp6); Mux(a=firstcomp7, b=Notfirstcomp7, sel=nx, out=secondcomp7);
   Mux(a=firstcomp8, b=Notfirstcomp8, sel=nx, out=secondcomp8); Mux(a=firstcomp9, b=Notfirstcomp9, sel=nx, out=secondcomp9);
   Mux(a=firstcomp10, b=Notfirstcomp10, sel=nx, out=secondcomp10); Mux(a=firstcomp11, b=Notfirstcomp11, sel=nx, out=secondcomp11);
   Mux(a=firstcomp12, b=Notfirstcomp12, sel=nx, out=secondcomp12); Mux(a=firstcomp13, b=Notfirstcomp13, sel=nx, out=secondcomp13);
   Mux(a=firstcomp14, b=Notfirstcomp14, sel=nx, out=secondcomp14); Mux(a=firstcomp15, b=Notfirstcomp15, sel=nx, out=secondcomp15);
   
   // taking the mux of zy: if it is zero we output y, if it is 1 we output the zero value:
   Mux(a=y[0], b=zero, sel=zy, out=thirdcomp0); Mux(a=y[1], b=zero, sel=zy, out=thirdcomp1); Mux(a=y[2], b=zero, sel=zy, out=thirdcomp2);
   Mux(a=y[3], b=zero, sel=zy, out=thirdcomp3); Mux(a=y[4], b=zero, sel=zy, out=thirdcomp4); Mux(a=y[5], b=zero, sel=zy, out=thirdcomp5);
   Mux(a=y[6], b=zero, sel=zy, out=thirdcomp6); Mux(a=y[7], b=zero, sel=zy, out=thirdcomp7); Mux(a=y[8], b=zero, sel=zy, out=thirdcomp8);
   Mux(a=y[9], b=zero, sel=zy, out=thirdcomp9); Mux(a=y[10], b=zero, sel=zy, out=thirdcomp10); Mux(a=y[11], b=zero, sel=zy, out=thirdcomp11);
   Mux(a=y[12], b=zero, sel=zy, out=thirdcomp12); Mux(a=y[13], b=zero, sel=zy, out=thirdcomp13); Mux(a=y[14], b=zero, sel=zy, out=thirdcomp14);
   Mux(a=y[15], b=zero, sel=zy, out=thirdcomp15);
   
   // finding the not values of the third comp for the fourth comp
   Not(in=thirdcomp0, out=Notthirdcomp0); Not(in=thirdcomp1, out=Notthirdcomp1); Not(in=thirdcomp2, out=Notthirdcomp2);
   Not(in=thirdcomp3, out=Notthirdcomp3); Not(in=thirdcomp4, out=Notthirdcomp4); Not(in=thirdcomp5, out=Notthirdcomp5);
   Not(in=thirdcomp6, out=Notthirdcomp6); Not(in=thirdcomp7, out=Notthirdcomp7); Not(in=thirdcomp8, out=Notthirdcomp8);
   Not(in=thirdcomp9, out=Notthirdcomp9); Not(in=thirdcomp10, out=Notthirdcomp10); Not(in=thirdcomp11, out=Notthirdcomp11);
   Not(in=thirdcomp12, out=Notthirdcomp12); Not(in=thirdcomp13, out=Notthirdcomp13); Not(in=thirdcomp14, out=Notthirdcomp14);
   Not(in=thirdcomp15, out=Notthirdcomp15);
   // taking the mux of ny: if it is zero we output the thirdcompn, if it is 1 we output the not of the thirdcompn
   Mux(a=thirdcomp0, b=Notthirdcomp0, sel=ny, out=fourthcomp0); Mux(a=thirdcomp1, b=Notthirdcomp1, sel=ny, out=fourthcomp1);
   Mux(a=thirdcomp2, b=Notthirdcomp2, sel=ny, out=fourthcomp2); Mux(a=thirdcomp3, b=Notthirdcomp3, sel=ny, out=fourthcomp3);
   Mux(a=thirdcomp4, b=Notthirdcomp4, sel=ny, out=fourthcomp4); Mux(a=thirdcomp5, b=Notthirdcomp5, sel=ny, out=fourthcomp5);
   Mux(a=thirdcomp6, b=Notthirdcomp6, sel=ny, out=fourthcomp6); Mux(a=thirdcomp7, b=Notthirdcomp7, sel=ny, out=fourthcomp7);
   Mux(a=thirdcomp8, b=Notthirdcomp8, sel=ny, out=fourthcomp8); Mux(a=thirdcomp9, b=Notthirdcomp9, sel=ny, out=fourthcomp9);
   Mux(a=thirdcomp10, b=Notthirdcomp10, sel=ny, out=fourthcomp10); Mux(a=thirdcomp11, b=Notthirdcomp11, sel=ny, out=fourthcomp11);
   Mux(a=thirdcomp12, b=Notthirdcomp12, sel=ny, out=fourthcomp12); Mux(a=thirdcomp13, b=Notthirdcomp13, sel=ny, out=fourthcomp13);
   Mux(a=thirdcomp14, b=Notthirdcomp14, sel=ny, out=fourthcomp14); Mux(a=thirdcomp15, b=Notthirdcomp15, sel=ny, out=fourthcomp15);
   
   // computing add for f == 1
   HalfAdder(a=secondcomp0, b=fourthcomp0, carry=carr0, sum=Add0);
   FullAdder(a=secondcomp1, b=fourthcomp1, c=carr0, carry=carr1, sum=Add1); FullAdder(a=secondcomp2, b=fourthcomp2, c=carr1,  carry=carr2, sum=Add2);
   FullAdder(a=secondcomp3, b=fourthcomp3, c=carr2, carry=carr3, sum=Add3); FullAdder(a=secondcomp4, b=fourthcomp4, c=carr3, carry=carr4,
sum=Add4);
   FullAdder(a=secondcomp5, b=fourthcomp5, c=carr4, carry=carr5, sum=Add5); FullAdder(a=secondcomp6, b=fourthcomp6, c=carr5, carry=carr6, sum=Add6);
   FullAdder(a=secondcomp7, b=fourthcomp7, c=carr6, carry=carr7, sum=Add7); FullAdder(a=secondcomp8, b=fourthcomp8, c=carr7, carry=carr8,
sum=Add8);
   FullAdder(a=secondcomp9, b=fourthcomp9, c=carr8, carry=carr9, sum=Add9); FullAdder(a=secondcomp10, b=fourthcomp10, c=carr9, carry=carr10,
sum=Add10);
   FullAdder(a=secondcomp11, b=fourthcomp11, c=carr10, carry=carr11, sum=Add11); FullAdder(a=secondcomp12, b=fourthcomp12, c=carr11, carry=carr12,
sum=Add12);
   FullAdder(a=secondcomp13, b=fourthcomp13, c=carr12, carry=carr13, sum=Add13); FullAdder(a=secondcomp14, b=fourthcomp14, c=carr13, carry=carr14,
sum=Add14);
   FullAdder(a=secondcomp15, b=fourthcomp15, c=carr14, carry=carr15, sum=Add15); 
   // computing and for f == 1
   And(a=secondcomp0, b=fourthcomp0, out=And0); And(a=secondcomp1, b=fourthcomp1, out=And1); And(a=secondcomp2, b=fourthcomp2, out=And2);
   And(a=secondcomp3, b=fourthcomp3, out=And3); And(a=secondcomp4, b=fourthcomp4, out=And4); And(a=secondcomp5, b=fourthcomp5, out=And5);
   And(a=secondcomp6, b=fourthcomp6, out=And6); And(a=secondcomp7, b=fourthcomp7, out=And7); And(a=secondcomp8, b=fourthcomp8, out=And8);
   And(a=secondcomp9, b=fourthcomp9, out=And9); And(a=secondcomp10, b=fourthcomp10, out=And10); And(a=secondcomp11, b=fourthcomp11, out=And11);
   And(a=secondcomp12, b=fourthcomp12, out=And12); And(a=secondcomp13, b=fourthcomp13, out=And13); And(a=secondcomp14, b=fourthcomp14, out=And14);
   And(a=secondcomp15, b=fourthcomp15, out=And15);
   
   // taking mux for f == 1and f == 0; if f == 1: output add, else: output And
   Mux(a=And0, b=Add0, sel=f, out=fifthcomp0); Mux(a=And1, b=Add1, sel=f, out=fifthcomp1); Mux(a=And2, b=Add2, sel=f, out=fifthcomp2);
   Mux(a=And3, b=Add3, sel=f, out=fifthcomp3); Mux(a=And4, b=Add4, sel=f, out=fifthcomp4); Mux(a=And5, b=Add5, sel=f, out=fifthcomp5);
   Mux(a=And6, b=Add6, sel=f, out=fifthcomp6); Mux(a=And7, b=Add7, sel=f, out=fifthcomp7); Mux(a=And8, b=Add8, sel=f, out=fifthcomp8);
   Mux(a=And9, b=Add9, sel=f, out=fifthcomp9); Mux(a=And10, b=Add10, sel=f, out=fifthcomp10); Mux(a=And11, b=Add11, sel=f, out=fifthcomp11);
   Mux(a=And12, b=Add12, sel=f, out=fifthcomp12); Mux(a=And13, b=Add13, sel=f, out=fifthcomp13); Mux(a=And14, b=Add14, sel=f, out=fifthcomp14);
   Mux(a=And15, b=Add15, sel=f, out=fifthcomp15);
   
   // computing the not of fifthcompn for the case no == 1
   Not(in=fifthcomp0, out=Notfifthcomp0); Not(in=fifthcomp1, out=Notfifthcomp1); Not(in=fifthcomp2, out=Notfifthcomp2);
   Not(in=fifthcomp3, out=Notfifthcomp3); Not(in=fifthcomp4, out=Notfifthcomp4); Not(in=fifthcomp5, out=Notfifthcomp5); 
   Not(in=fifthcomp6, out=Notfifthcomp6); Not(in=fifthcomp7, out=Notfifthcomp7); Not(in=fifthcomp8, out=Notfifthcomp8); 
   Not(in=fifthcomp9, out=Notfifthcomp9); Not(in=fifthcomp10, out=Notfifthcomp10); Not(in=fifthcomp11, out=Notfifthcomp11); 
   Not(in=fifthcomp12, out=Notfifthcomp12); Not(in=fifthcomp13, out=Notfifthcomp13); Not(in=fifthcomp14, out=Notfifthcomp14);
   Not(in=fifthcomp15, out=Notfifthcomp15);
   
   // taking mux for no: if no == 0: output fifthcompn, if n0 == 1: output Notfifthcompn
   Mux(a=fifthcomp0, b=Notfifthcomp0, sel=no, out=sixthcomp0); Mux(a=fifthcomp1, b=Notfifthcomp1, sel=no, out=sixthcomp1);
   Mux(a=fifthcomp2, b=Notfifthcomp2, sel=no, out=sixthcomp2); Mux(a=fifthcomp3, b=Notfifthcomp3, sel=no, out=sixthcomp3);
   Mux(a=fifthcomp4, b=Notfifthcomp4, sel=no, out=sixthcomp4); Mux(a=fifthcomp5, b=Notfifthcomp5, sel=no, out=sixthcomp5);
   Mux(a=fifthcomp6, b=Notfifthcomp6, sel=no, out=sixthcomp6); Mux(a=fifthcomp7, b=Notfifthcomp7, sel=no, out=sixthcomp7);
   Mux(a=fifthcomp8, b=Notfifthcomp8, sel=no, out=sixthcomp8); Mux(a=fifthcomp9, b=Notfifthcomp9, sel=no, out=sixthcomp9);
   Mux(a=fifthcomp10, b=Notfifthcomp10, sel=no, out=sixthcomp10); Mux(a=fifthcomp11, b=Notfifthcomp11, sel=no, out=sixthcomp11);
   Mux(a=fifthcomp12, b=Notfifthcomp12, sel=no, out=sixthcomp12); Mux(a=fifthcomp13, b=Notfifthcomp13, sel=no, out=sixthcomp13);
   Mux(a=fifthcomp14, b=Notfifthcomp14, sel=no, out=sixthcomp14); Mux(a=fifthcomp15, b=Notfifthcomp15, sel=no, out=sixthcomp15);
   
   And(a=sixthcomp15, b=one, out=ng);
   
   // testing if all output is zeros
   Or(a=sixthcomp0, b=sixthcomp1, out=or1); Or(a=sixthcomp1, b=or1, out=or2); Or(a=sixthcomp2, b=or2, out=or3);
   Or(a=sixthcomp3, b=or3, out=or4); Or(a=sixthcomp4, b=or4, out=or5); Or(a=sixthcomp5, b=or5, out=or6);
   Or(a=sixthcomp6, b=or6, out=or7); Or(a=sixthcomp7, b=or7, out=or8); Or(a=sixthcomp8, b=or8, out=or9);
   Or(a=sixthcomp9, b=or9, out=or10); Or(a=sixthcomp10, b=or10, out=or11); Or(a=sixthcomp11, b=or11, out=or12);
   Or(a=sixthcomp12, b=or12, out=or13); Or(a=sixthcomp13, b=or13, out=or14); Or(a=sixthcomp14, b=or14, out=or15);
   Or(a=sixthcomp15, b=or15, out=temp);
   Not(in=temp, out=zr);
   
   // transferring the out results to the output:
   Or(a=sixthcomp0, b=sixthcomp0, out=out[0]); Or(a=sixthcomp1, b=sixthcomp1, out=out[1]);Or(a=sixthcomp2, b=sixthcomp2, out=out[2]);
   Or(a=sixthcomp3, b=sixthcomp3, out=out[3]); Or(a=sixthcomp4, b=sixthcomp4, out=out[4]); Or(a=sixthcomp5, b=sixthcomp5, out=out[5]);
   Or(a=sixthcomp6, b=sixthcomp6, out=out[6]); Or(a=sixthcomp7, b=sixthcomp7, out=out[7]); Or(a=sixthcomp8, b=sixthcomp8, out=out[8]);
   Or(a=sixthcomp9, b=sixthcomp9, out=out[9]); Or(a=sixthcomp10, b=sixthcomp10, out=out[10]); Or(a=sixthcomp11, b=sixthcomp11, out=out[11]);
   Or(a=sixthcomp12, b=sixthcomp12, out=out[12]); Or(a=sixthcomp13, b=sixthcomp13, out=out[13]); Or(a=sixthcomp14, b=sixthcomp14, out=out[14]);
   Or(a=sixthcomp15, b=sixthcomp15, out=out[15]);
   
   }
