// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // if zx == 1:
   Xor(a=zx, b=true, out=XorZX); Not(in=XorZX, out=NZX);
   And(a=x[0], b=NZX, out=new_x_0); And(a=x[1], b=NZX, out=new_x_1); And(a=x[2], b=NZX, out=new_x_2); And(a=x[3], b=NZX, out=new_x_3);
   And(a=x[4], b=NZX, out=new_x_4); And(a=x[5], b=NZX, out=new_x_5); And(a=x[6], b=NZX, out=new_x_6); And(a=x[7], b=NZX, out=new_x_7);
   And(a=x[8], b=NZX, out=new_x_8); And(a=x[9], b=NZX, out=new_x_9); And(a=x[10], b=NZX, out=new_x_10); And(a=x[11], b=NZX, out=new_x_11);
   And(a=x[12], b=NZX, out=new_x_12); And(a=x[13], b=NZX, out=new_x_13); And(a=x[14], b=NZX, out=new_x_14); And(a=x[15], b=NZX, out=new_x_15);
    
   // if nx == 1:
   Not(in=nx, out=Nnx); 
   Not(in=new_x_0, out=Not_new_x_0); Not(in=new_x_1, out=Not_new_x_1); Not(in=new_x_2, out=Not_new_x_2); Not(in=new_x_3, out=Not_new_x_3);
   Not(in=new_x_4, out=Not_new_x_4); Not(in=new_x_5, out=Not_new_x_5); Not(in=new_x_6, out=Not_new_x_6); Not(in=new_x_7, out=Not_new_x_7);
   Not(in=new_x_8, out=Not_new_x_8); Not(in=new_x_9, out=Not_new_x_9); Not(in=new_x_10, out=Not_new_x_10); Not(in=new_x_11, out=Not_new_x_11);
   Not(in=new_x_12, out=Not_new_x_12); Not(in=new_x_13, out=Not_new_x_13); Not(in=new_x_14, out=Not_new_x_14); Not(in=new_x_15, out=Not_new_x_15);
   
   // first set of ANDS (Not(nx) and x[0...15])
   And(a=x[0], b=Nnx, out=And_x_Nnx_0); And(a=x[1], b=Nnx, out=And_x_Nnx_1); And(a=x[2], b=Nnx, out=And_x_Nnx_2); And(a=x[3], b=Nnx, out=And_x_Nnx_3);
   And(a=x[4], b=Nnx, out=And_x_Nnx_4); And(a=x[5], b=Nnx, out=And_x_Nnx_5); And(a=x[6], b=Nnx, out=And_x_Nnx_6); And(a=x[7], b=Nnx, out=And_x_Nnx_7);
   And(a=x[8], b=Nnx, out=And_x_Nnx_8); And(a=x[9], b=Nnx, out=And_x_Nnx_9); And(a=x[10], b=Nnx, out=And_x_Nnx_10); And(a=x[11], b=Nnx, out=And_x_Nnx_11);
   And(a=x[12], b=Nnx, out=And_x_Nnx_12); And(a=x[13], b=Nnx, out=And_x_Nnx_13); And(a=x[14], b=Nnx, out=And_x_Nnx_14); And(a=x[15], b=Nnx, out=And_x_Nnx_15);
   
   // second set of ANDS(nx and Not_new_x_[0...15]);
   And(a=Not_new_x_0, b=nx, out=And_Not_new_x_nx_0); And(a=Not_new_x_1, b=nx, out=And_Not_new_x_nx_1); And(a=Not_new_x_2, b=nx, out=And_Not_new_x_nx_2); And(a=Not_new_x_3, b=nx, out=And_Not_new_x_nx_3);
   And(a=Not_new_x_4, b=nx, out=And_Not_new_x_nx_4); And(a=Not_new_x_5, b=nx, out=And_Not_new_x_nx_5); And(a=Not_new_x_6, b=nx, out=And_Not_new_x_nx_6); And(a=Not_new_x_7, b=nx, out=And_Not_new_x_nx_7);
   And(a=Not_new_x_8, b=nx, out=And_Not_new_x_nx_8); And(a=Not_new_x_9, b=nx, out=And_Not_new_x_nx_9); And(a=Not_new_x_10, b=nx, out=And_Not_new_x_nx_10); And(a=Not_new_x_11, b=nx, out=And_Not_new_x_nx_11);
   And(a=Not_new_x_12, b=nx, out=And_Not_new_x_nx_12); And(a=Not_new_x_13, b=nx, out=And_Not_new_x_nx_13); And(a=Not_new_x_14, b=nx, out=And_Not_new_x_nx_14); And(a=Not_new_x_15, b=nx, out=And_Not_new_x_nx_15);
   // ors
   Or(a=And_x_Nnx_0, b=And_Not_new_x_nx_0, out=new_new_x_0); Or(a=And_x_Nnx_1, b=And_Not_new_x_nx_1, out=new_new_x_1);
   Or(a=And_x_Nnx_2, b=And_Not_new_x_nx_2, out=new_new_x_2); Or(a=And_x_Nnx_3, b=And_Not_new_x_nx_3, out=new_new_x_3);
   Or(a=And_x_Nnx_4, b=And_Not_new_x_nx_4, out=new_new_x_4); Or(a=And_x_Nnx_5, b=And_Not_new_x_nx_5, out=new_new_x_5);
   Or(a=And_x_Nnx_6, b=And_Not_new_x_nx_6, out=new_new_x_6); Or(a=And_x_Nnx_7, b=And_Not_new_x_nx_7, out=new_new_x_7);
   Or(a=And_x_Nnx_8, b=And_Not_new_x_nx_8, out=new_new_x_8); Or(a=And_x_Nnx_9, b=And_Not_new_x_nx_9, out=new_new_x_9);
   Or(a=And_x_Nnx_10, b=And_Not_new_x_nx_10, out=new_new_x_10); Or(a=And_x_Nnx_11, b=And_Not_new_x_nx_11, out=new_new_x_11);
   Or(a=And_x_Nnx_12, b=And_Not_new_x_nx_12, out=new_new_x_12); Or(a=And_x_Nnx_13, b=And_Not_new_x_nx_13, out=new_new_x_13);
   Or(a=And_x_Nnx_14, b=And_Not_new_x_nx_14, out=new_new_x_14); Or(a=And_x_Nnx_15, b=And_Not_new_x_nx_15, out=new_new_x_15);

   
   // if zy == 1:
   Xor(a=zy, b=true, out=XorZY); Not(in=XorZY, out=NZY);
   And(a=y[0], b=NZY, out=new_y_0); And(a=y[1], b=NZY, out=new_y_1); And(a=y[2], b=NZY, out=new_y_2); And(a=y[3], b=NZY, out=new_y_3);
   And(a=y[4], b=NZY, out=new_y_4); And(a=y[5], b=NZY, out=new_y_5); And(a=y[6], b=NZY, out=new_y_6); And(a=y[7], b=NZY, out=new_y_7);
   And(a=y[8], b=NZY, out=new_y_8); And(a=y[9], b=NZY, out=new_y_9); And(a=y[10], b=NZY, out=new_y_10); And(a=y[11], b=NZY, out=new_y_11);
   And(a=y[12], b=NZY, out=new_y_12); And(a=y[13], b=NZY, out=new_y_13); And(a=y[14], b=NZY, out=new_y_14); And(a=y[15], b=NZY, out=new_y_15);
   
   // if ny == 1:
   Not(in=ny, out=Nny); 
   Not(in=new_y_0, out=Not_new_y_0); Not(in=new_y_1, out=Not_new_y_1); Not(in=new_y_2, out=Not_new_y_2); Not(in=new_y_3, out=Not_new_y_3);
   Not(in=new_y_4, out=Not_new_y_4); Not(in=new_y_5, out=Not_new_y_5); Not(in=new_y_6, out=Not_new_y_6); Not(in=new_y_7, out=Not_new_y_7);
   Not(in=new_y_8, out=Not_new_y_8); Not(in=new_y_9, out=Not_new_y_9); Not(in=new_y_10, out=Not_new_y_10); Not(in=new_y_11, out=Not_new_y_11);
   Not(in=new_y_12, out=Not_new_y_12); Not(in=new_y_13, out=Not_new_y_13); Not(in=new_y_14, out=Not_new_y_14); Not(in=new_y_15, out=Not_new_y_15);
   
   // first set of ANDS (Not(ny) and y[0...15])
   And(a=y[0], b=Nny, out=And_y_Nny_0); And(a=y[1], b=Nny, out=And_y_Nny_1); And(a=y[2], b=Nny, out=And_y_Nny_2); And(a=y[3], b=Nny, out=And_y_Nny_3);
   And(a=y[4], b=Nny, out=And_y_Nny_4); And(a=y[5], b=Nny, out=And_y_Nny_5); And(a=y[6], b=Nny, out=And_y_Nny_6); And(a=y[7], b=Nny, out=And_y_Nny_7);
   And(a=y[8], b=Nny, out=And_y_Nny_8); And(a=y[9], b=Nny, out=And_y_Nny_9); And(a=y[10], b=Nny, out=And_y_Nny_10); And(a=y[11], b=Nny, out=And_y_Nny_11);
   And(a=y[12], b=Nny, out=And_y_Nny_12); And(a=y[13], b=Nny, out=And_y_Nny_13); And(a=y[14], b=Nny, out=And_y_Nny_14); And(a=y[15], b=Nny, out=And_y_Nny_15);
   
   // second set of ANDS(ny and Not_new_y_[0...15]);
   And(a=Not_new_y_0, b=ny, out=And_Not_new_y_ny_0); And(a=Not_new_y_1, b=ny, out=And_Not_new_y_ny_1); And(a=Not_new_y_2, b=ny, out=And_Not_new_y_ny_2); And(a=Not_new_y_3, b=ny, out=And_Not_new_y_ny_3);
   And(a=Not_new_y_4, b=ny, out=And_Not_new_y_ny_4); And(a=Not_new_y_5, b=ny, out=And_Not_new_y_ny_5); And(a=Not_new_y_6, b=ny, out=And_Not_new_y_ny_6); And(a=Not_new_y_7, b=ny, out=And_Not_new_y_ny_7);
   And(a=Not_new_y_8, b=ny, out=And_Not_new_y_ny_8); And(a=Not_new_y_9, b=ny, out=And_Not_new_y_ny_9); And(a=Not_new_y_10, b=ny, out=And_Not_new_y_ny_10); And(a=Not_new_y_11, b=ny, out=And_Not_new_y_ny_11);
   And(a=Not_new_y_12, b=ny, out=And_Not_new_y_ny_12); And(a=Not_new_y_13, b=ny, out=And_Not_new_y_ny_13); And(a=Not_new_y_14, b=ny, out=And_Not_new_y_ny_14); And(a=Not_new_y_15, b=ny, out=And_Not_new_y_ny_15);
   // ors
   Or(a=And_y_Nny_0, b=And_Not_new_y_ny_0, out=new_new_y_0); Or(a=And_y_Nny_1, b=And_Not_new_y_ny_1, out=new_new_y_1);
   Or(a=And_y_Nny_2, b=And_Not_new_y_ny_2, out=new_new_y_2); Or(a=And_y_Nny_3, b=And_Not_new_y_ny_3, out=new_new_y_3);
   Or(a=And_y_Nny_4, b=And_Not_new_y_ny_4, out=new_new_y_4); Or(a=And_y_Nny_5, b=And_Not_new_y_ny_5, out=new_new_y_5);
   Or(a=And_y_Nny_6, b=And_Not_new_y_ny_6, out=new_new_y_6); Or(a=And_y_Nny_7, b=And_Not_new_y_ny_7, out=new_new_y_7);
   Or(a=And_y_Nny_8, b=And_Not_new_y_ny_8, out=new_new_y_8); Or(a=And_y_Nny_9, b=And_Not_new_y_ny_9, out=new_new_y_9);
   Or(a=And_y_Nny_10, b=And_Not_new_y_ny_10, out=new_new_y_10); Or(a=And_y_Nny_11, b=And_Not_new_y_ny_11, out=new_new_y_11);
   Or(a=And_y_Nny_12, b=And_Not_new_y_ny_12, out=new_new_y_12); Or(a=And_y_Nny_13, b=And_Not_new_y_ny_13, out=new_new_y_13);
   Or(a=And_y_Nny_14, b=And_Not_new_y_ny_14, out=new_new_y_14); Or(a=And_y_Nny_15, b=And_Not_new_y_ny_15, out=new_new_y_15);


   
}
