// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
    And(a=in[15],b=in[15], out=AorC); // if the first digit is 1 then we have a c-instruction if it is 0 we have an a instruction
    Xor(a=in[0], b=in[0], out=Zero);
    Not(in=Zero, out=One);
    
    Mux(a=Zero, b=in[15], sel=AorC, out=type);
    
    Mux(a=Zero,b=in[12], sel=AorC,out=a); // if it is an A instruction mux will output 0, else 1
    Mux(a=Zero, b=in[11], sel=AorC, out=c1);
    Mux(a=Zero, b=in[10], sel=AorC, out=c2);
    Mux(a=Zero, b=in[9], sel=AorC, out=c3);
    Mux(a=Zero, b=in[8], sel=AorC, out=c4);
    Mux(a=Zero, b=in[7], sel=AorC, out=c5);
    Mux(a=Zero, b=in[6], sel=AorC, out=c6);
    Mux(a=One, b=in[5], sel=AorC, out=d1); // default is 1
    Mux(a=Zero, b=in[4], sel=AorC, out=d2);
    Mux(a=Zero, b=in[3], sel=AorC, out=d3);
    Mux(a=Zero, b=in[2], sel=AorC, out=j1);
    Mux(a=Zero, b=in[1], sel=AorC, out=j2);
    Mux(a=Zero, b=in[0], sel=AorC, out=j3);
    
    
    // Put your code here:
}
