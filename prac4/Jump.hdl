// File name: Jump.hdl

/**
 * The jump unit determines whether the Program Counter should jump.
 * A jump is performed if any of the j1 j2 j3 bits of the c-instruction 
 * are true, AND the matching condition is met:
 *   j1: jump if ALU output is < 0
 *   j2: jump if ALU output   == 0
 *   j3: jump if ALU output is > 0
 * If multiple of these bits are set true, then jump if any of 
 * those conditions are met,
 * e.g. if j1 and j2 are both set true, jump if < 0 or == 0 
 * The ALU output is determined through the zr and ng wires:
 *   zr: is true when the ALU's output   == 0, false otherwise
 *   ng: is true when the ALU's output is < 0, false otherwise
 * If both zr and ng are false, then the ALU's output is > 0
 */

CHIP Jump {

    IN  j1,             // c-instruction j1
        j2,             // c-instruction j2
        j3,             // c-instruction j3
        zr,             // zr pin from ALU
        ng;             // ng pin from ALU

    OUT jump;           // true if a jump should be performed, false otherwise 

PARTS:
    // Put your code here:
    And(a=j1, b=ng, out=AndJ1); // checking that both j1 and ALU < 0 is true
    Xor(a=j1, b=j1, out=zero);
    Not(in=zero, out=one);
    Mux(a=zero, b=one, sel=AndJ1, out=firstcheck);
    
    And(a=j2, b=zr, out=AndJ2); // checking that j2 is true and alu == 0
    Mux(a=zero, b=one, sel=AndJ2, out=secondcheck);
    
    Not(in=ng, out=Nng);
    And(a=j3, b=Nng, out=AndJ3); // checking that j3 is true and not alu < 0
    // meaning alu > 0
    Mux(a=zero, b=one, sel=AndJ3, out=thirdcheck);
    
    // checking that any of the mux's are true
    Or(a=firstcheck, b=secondcheck, out=or1);
    Or(a=or1, b=thirdcheck, out=jump); // will be true if any of the conditions are met
    
}
